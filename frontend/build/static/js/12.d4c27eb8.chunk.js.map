{"version":3,"sources":["components/blogs/Card.tsx","components/blogs/Form.tsx","components/blogs/Button.tsx","components/layouts/Toast.tsx","pages/blogs/new.tsx"],"names":["style","media","height","width","backgroundSize","deck","image","objectFit","ImageCard","ogImage","title","TrendDecksCard","data","history","gutterBottom","variant","component","slice","map","blog","key","id","src","og_image","alt","top","hover","waves","overlay","tag","small","muted","created_at","description","transparent","color","size","onClick","push","RecentDecksCard","latestOrderBlogs","sort","a","b","Date","getTime","RelatedDecksCard","nextBlog","filter","prevBlog","BlogsSelect","setId","FormControl","minWidth","InputLabel","Select","labelId","value","onChange","e","target","MenuItem","StatusSelect","status","setStatus","option","TitleForm","setTitle","TextField","label","DescriptionForm","setDescription","OgImageForm","setOgImage","FetchButton","fetchRequest","Button","SaveButton","saveRequest","Toast","toast","Snackbar","open","isOpen","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","message","mapDispatchToProps","setEditorState","blogsActions","fetchAllRequest","BlogsNewPage","React","componentDidMount","this","props","render","editorState","updatedAt","Container","maxWidth","className","Typography","Chip","Divider","Grid","container","spacing","item","xs","onEditorStateChange","connect","blogs"],"mappings":"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","file":"static/js/12.d4c27eb8.chunk.js","sourcesContent":["import React from 'react'\nimport { Blog } from 'store/blogs/types'\nimport { History } from 'history'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport { MDBCard, MDBCardTitle, MDBBtn, MDBCardGroup, MDBCardImage, MDBCardText, MDBCardBody, MDBCardFooter } from \"mdbreact\";\nimport Typography from '@material-ui/core/Typography'\n\ninterface DeckCardProps {\n  id: number\n  data: Blog[]\n  history: History\n}\ninterface ImageCardProps {\n  ogImage: string\n}\nconst style = {\n  media: {\n    height: '40vh',\n    width: 'auto',\n    backgroundSize: 'contain'\n  },\n  deck: {\n    image: {\n      height: '20vh',\n      objectFit: 'cover'\n    }\n  }\n}\n\nexport const ImageCard: React.FC<ImageCardProps> = ({ ogImage }) => (\n  <Card>\n    <CardActionArea>\n      <CardMedia image={ogImage || 'image'} title=\"blog image\" style={style.media} />\n    </CardActionArea>\n  </Card>\n)\n\nexport const TrendDecksCard: React.FC<DeckCardProps> = ({ data, history }) => {\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        人気の記事\n      </Typography>\n      <MDBCardGroup deck>\n        {data.slice(0, 3).map(blog => (\n          <MDBCard key={blog.id}>\n            <MDBCardImage src={blog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{blog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {blog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {blog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`blogs/${blog.id}`)}>\n                記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        ))}\n      </MDBCardGroup>\n    </div>\n  )\n}\n\nexport const RecentDecksCard: React.FC<DeckCardProps> = ({ data, history }) => {\n  const latestOrderBlogs = data.sort((a,b) => {\n    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n  });\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        最近の記事\n      </Typography>\n      <MDBCardGroup deck>\n        {latestOrderBlogs.slice(0, 3).map(blog => (\n          <MDBCard key={blog.id}>\n            <MDBCardImage src={blog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{blog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {blog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {blog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`/blogs/${blog.id}`)}>\n                記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        ))}\n      </MDBCardGroup>\n    </div>\n  )\n}\n\nexport const RelatedDecksCard: React.FC<DeckCardProps> = ({ id, data, history }) => {\n  const nextBlog = data.filter(blog => blog.id === id + 1)[0]\n  const prevBlog = data.filter(blog => blog.id === id - 1)[0]\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        関連の記事\n      </Typography>\n      <MDBCardGroup deck>\n        {prevBlog &&\n          <MDBCard>\n            <MDBCardImage src={prevBlog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{prevBlog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {prevBlog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {prevBlog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`/blogs/${prevBlog.id}`)}>\n                前の記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        }\n        {nextBlog &&\n          <MDBCard>\n            <MDBCardImage src={nextBlog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{nextBlog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {nextBlog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {nextBlog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`/blogs/${nextBlog.id}`)}>\n                次の記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        }\n      </MDBCardGroup>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport * as blogsActions from 'store/blogs/actions'\nimport { Blog } from 'store/blogs/types'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n\ninterface BlogsSelectProps {\n  data: Blog[]\n  id: number\n  setId: typeof blogsActions.setId\n}\ninterface StatusSelectProps {\n  status: string\n  setStatus: typeof blogsActions.setStatus\n}\ninterface TitleFormProps {\n  title: string\n  setTitle: typeof blogsActions.setTitle\n}\ninterface DescriptionFormProps {\n  description: string\n  setDescription: typeof blogsActions.setDescription\n}\ninterface OgImageFormProps {\n  ogImage: string\n  setOgImage: typeof blogsActions.setOgImage\n}\n\nexport const BlogsSelect: React.FC<BlogsSelectProps> = ({ id, data, setId }) => {\n  const latestOrderBlogs = data.sort((a,b) => {\n    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n  });\n  return (\n    <FormControl style={{ minWidth: 120 }}>\n      <InputLabel id=\"blog-set\">Select Blog</InputLabel>\n      <Select labelId=\"blog-set\" id=\"blog-set\" value={id || ''} onChange={e => setId(e.target.value)}>\n        <MenuItem value={0} key={0}>\n          新しく作成\n        </MenuItem>\n        {latestOrderBlogs.map(blog => (\n          <MenuItem value={blog.id} key={blog.id}>\n            {blog.title}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\nexport const StatusSelect: React.FC<StatusSelectProps> = ({ status, setStatus }) => {\n  const options = [{ status: 'editing' }, { status: 'publish' }, { status: 'hidden' }]\n  return (\n    <FormControl style={{ minWidth: 120 }}>\n      <InputLabel id=\"status-set\">Select Status</InputLabel>\n      <Select labelId=\"status-set\" id=\"status-set\" value={status} onChange={e => setStatus(e.target.value)}>\n        {options.map(option => (\n          <MenuItem value={option.status} key={option.status}>\n            {option.status}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\nexport const TitleForm: React.FC<TitleFormProps> = ({ title, setTitle }) => (\n  <TextField id=\"title-form\" label=\"title\" value={title} onChange={e => setTitle(e.target.value)} />\n)\nexport const DescriptionForm: React.FC<DescriptionFormProps> = ({ description, setDescription }) => (\n  <TextField id=\"description-form\" label=\"description\" value={description} onChange={e => setDescription(e.target.value)} />\n)\nexport const OgImageForm: React.FC<OgImageFormProps> = ({ ogImage, setOgImage }) => (\n  <TextField id=\"og_image_form\" label=\"og_image url\" value={ogImage} onChange={e => setOgImage(e.target.value)} />\n)\n","import * as React from 'react'\nimport * as blogsActions from 'store/blogs/actions'\nimport Button from '@material-ui/core/Button'\n\ninterface FetchButtonProps {\n  fetchRequest: typeof blogsActions.fetchRequest\n}\ninterface SaveButtonProps {\n  saveRequest: typeof blogsActions.saveRequest\n}\n\nexport const FetchButton: React.FC<FetchButtonProps> = ({ fetchRequest }) => (\n  <Button variant=\"contained\" color=\"primary\" onClick={() => fetchRequest()}>\n    Fetch\n  </Button>\n)\n\nexport const SaveButton: React.FC<SaveButtonProps> = ({ saveRequest }) => (\n  <Button variant=\"contained\" color=\"secondary\" onClick={() => saveRequest()}>\n    Save\n  </Button>\n)\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport { Alert } from '@material-ui/lab'\n\ninterface AlertProps {\n  toast: {\n    message?: string\n    severity?: 'success' | 'info' | 'warning' | 'error' | undefined\n    isOpen?: boolean\n  }\n}\nconst Toast: React.FC<AlertProps> = ({ toast }) => (\n  <Snackbar open={toast.isOpen} autoHideDuration={1000} anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n    <Alert severity={toast.severity}>{toast.message}</Alert>\n  </Snackbar>\n)\n\nexport default Toast\n","import * as React from 'react'\nimport { AppState } from 'store'\nimport { connect } from 'react-redux'\nimport * as blogsActions from 'store/blogs/actions'\nimport { Blog } from 'store/blogs/types'\nimport { BlogsSelect, OgImageForm, TitleForm, DescriptionForm, StatusSelect } from 'components/blogs/Form'\nimport { FetchButton, SaveButton } from 'components/blogs/Button'\nimport { Editor } from 'react-draft-wysiwyg'\nimport { EditorState } from 'draft-js'\nimport Toast from 'components/layouts/Toast'\nimport { ImageCard } from 'components/blogs/Card'\nimport Container from '@material-ui/core/Container'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport Chip from '@material-ui/core/Chip'\nimport Grid from '@material-ui/core/Grid'\n\ninterface PropsFromState {\n  id: number\n  title: string\n  description: string\n  ogImage: string\n  status: string\n  data: Blog[]\n  editorState: EditorState\n  updatedAt: string\n  toast: { message: string; severity: 'success' | 'info' | 'warning' | 'error' | undefined; isOpen: boolean }\n}\ninterface PropsFromDispatch {\n  setEditorState: typeof blogsActions.setEditorState\n  setTitle: typeof blogsActions.setTitle\n  setDescription: typeof blogsActions.setDescription\n  setOgImage: typeof blogsActions.setOgImage\n  setId: typeof blogsActions.setId\n  setStatus: typeof blogsActions.setStatus\n  fetchRequest: typeof blogsActions.fetchRequest\n  fetchAllRequest: typeof blogsActions.fetchAllRequest\n  saveRequest: typeof blogsActions.saveRequest\n}\ntype AllProps = PropsFromState & PropsFromDispatch\n\nconst mapStateToProps = ({ blogs }: AppState) => ({\n  id: blogs.id,\n  ogImage: blogs.ogImage,\n  title: blogs.title,\n  description: blogs.description,\n  status: blogs.status,\n  data: blogs.data,\n  editorState: blogs.editorState,\n  updatedAt: blogs.updatedAt,\n  toast: blogs.toast\n})\nconst mapDispatchToProps = {\n  setEditorState: blogsActions.setEditorState,\n  setTitle: blogsActions.setTitle,\n  setDescription: blogsActions.setDescription,\n  setOgImage: blogsActions.setOgImage,\n  setId: blogsActions.setId,\n  setStatus: blogsActions.setStatus,\n  fetchRequest: blogsActions.fetchRequest,\n  fetchAllRequest: blogsActions.fetchAllRequest,\n  saveRequest: blogsActions.saveRequest\n}\n\nclass BlogsNewPage extends React.Component<AllProps> {\n  componentDidMount() {\n    this.props.setStatus('all')\n    this.props.fetchAllRequest()\n  }\n  render() {\n    const { id, title, description, status, editorState, updatedAt, setEditorState } = this.props\n    return (\n      <>\n        <Toast {...this.props} />\n        <Container maxWidth=\"md\" className=\"my-4 blog min-vh-100\">\n          <Typography variant=\"h4\" gutterBottom>\n            {title}\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n            {updatedAt}\n          </Typography>\n          <Chip variant=\"outlined\" label={status} />\n          <Typography variant=\"subtitle1\" gutterBottom>\n            {description}\n          </Typography>\n          <ImageCard {...this.props} />\n          <Divider className=\"my-4\" />\n          <Card className=\"p-2\">\n            <Grid container spacing={3}>\n              <Grid item xs className=\"align-items-center d-flex\">\n                <div className=\"p-2 m-0\">\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    ID: {id || '未選択'}\n                  </Typography>\n                </div>\n                <BlogsSelect {...this.props} />\n                <FetchButton {...this.props} />\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs>\n                <TitleForm {...this.props} />\n              </Grid>\n              <Grid item xs>\n                <DescriptionForm {...this.props} />\n              </Grid>\n              <Grid item xs>\n                <OgImageForm {...this.props} />\n              </Grid>\n              <Grid item xs>\n                <StatusSelect {...this.props} />\n              </Grid>\n              <Grid item xs>\n                <SaveButton {...this.props} />\n              </Grid>\n            </Grid>\n          </Card>\n          <Editor editorState={editorState} onEditorStateChange={setEditorState} />\n        </Container>\n      </>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlogsNewPage)\n"],"sourceRoot":""}