{"version":3,"sources":["store/blogs/types.ts","components/layouts/Spinner.tsx","routes.tsx","components/layouts/NavBar.tsx","components/layouts/Footer.tsx","App.tsx","serviceWorker.ts","store/blogs/api.ts","store/blogs/sagas.ts","store/blogs/reducer.ts","store/index.ts","index.tsx","configureStore.ts","store/blogs/actions.ts"],"names":["BlogsActionTypes","style","spinner","height","display","justifyContent","alignItems","Spinner","className","type","color","width","BlogsPage","React","lazy","AccountsPage","Routes","fallback","path","component","useStyles","makeStyles","theme","createStyles","root","appBar","backgroundColor","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","logo","flexGrow","logoImg","maxHeight","cursor","hide","drawer","flexShrink","drawerPaper","drawerHeader","padding","mixins","toolbar","drawerLink","content","contentShift","scrollTop","position","bottom","right","zIndex","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","ScrollTop","classes","disableHysteresis","threshold","Zoom","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","preventDefault","role","NavBar","history","useTheme","open","setOpen","useState","copy","setCopy","handleDrawerClose","handleClipboardReset","shareUrl","location","origin","pathname","process","smoothscroll","polyfill","CssBaseline","AppBar","clsx","Toolbar","IconButton","aria-label","edge","alt","src","push","text","onCopy","Tooltip","title","placement","id","Drawer","variant","onClose","paper","Divider","to","List","ListItem","button","ListItemIcon","ListItemText","Fab","Footer","App","store","Boolean","hostname","match","API_ENDPOINT","handleSave","blogs","select","description","status","async","convertToRaw","editorState","getCurrentContent","data","axios","post","og_image","ogImage","JSON","stringify","isSuccess","error","saveRequest","put","blogsActions","message","severity","isOpen","err","handleFetch","state","res","get","fetchRequest","convertFromRaw","parse","blog","EditorState","createWithContent","handleFetchAll","params","fetchAllRequest","blogsSaga","all","takeLatest","SAVE_REQUEST","takeEvery","FETCH_REQUEST","FETCH_ALL_REQUEST","initialState","createEmpty","createdAt","updatedAt","toast","loading","reducer","action","FETCH_SUCCESS","payload","created_at","updated_at","FETCH_ALL_SUCCESS","SET_EDITOR_STATE","SET_TITLE","SET_DESCRIPTION","SET_OG_IMAGE","SET_STATUS","SET_ID","SET_TOAST","rootSaga","fork","createBrowserHistory","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","preloadedState","__PRELOADED_STATE__","createStore","combineReducers","blogsReducer","router","connectRouter","createRootReducer","applyMiddleware","routerMiddleware","snapSaveState","getState","run","configureStore","INITIAL_REDUX_STATE","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","setId","setStatus","setEditorState","setTitle","setDescription","setOgImage","setToast","fetchSuccess","fetchAllSuccess"],"mappings":"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","file":"static/js/main.48f801a7.chunk.js","sourcesContent":["import { EditorState } from 'draft-js'\n\nexport enum BlogsActionTypes {\n  FETCH_REQUEST = '@@blogs/FETCH_REQUEST',\n  FETCH_ALL_REQUEST = '@@blogs/FETCH_ALL_REQUEST',\n  FETCH_SUCCESS = '@@blogs/FETCH_SUCCESS',\n  FETCH_ALL_SUCCESS = '@@blogs/FETCH_ALL_SUCCESS',\n  SAVE_REQUEST = '@@blogs/SAVE_REQUEST',\n  SET_TOAST = '@@blogs/SET_TOAST',\n  SET_EDITOR_STATE = '@@blogs/SET_EDITOR_STATE',\n  SET_TITLE = '@@blogs/SET_TITLE',\n  SET_DESCRIPTION = '@@blogs/SET_DESCRIPTION',\n  SET_OG_IMAGE = '@@blogs/SET_OG_IMAGE',\n  SET_STATUS = '@@blogs/SET_STATUS',\n  SET_ID = '@@blogs/SET_ID'\n}\n\nexport interface Blog extends ApiResponse {\n  id: number\n  title: string\n  og_image: string\n  description: string\n  content: string\n  status: string\n  created_at: string\n  updated_at: string\n}\n\nexport type ApiResponse = Record<string, any>\n\nexport interface BlogsState {\n  readonly id: number\n  readonly editorState: EditorState\n  readonly style: string\n  readonly ogImage: string\n  readonly title: string\n  readonly description: string\n  readonly status: string\n  readonly data: Blog[]\n  readonly createdAt: string\n  readonly updatedAt: string\n  readonly loading: boolean\n  readonly toast: { message: string; severity: 'success' | 'info' | 'warning' | 'error' | undefined; isOpen: boolean }\n}\n","import React from 'react'\nimport Loader from 'react-loader-spinner'\n\nconst style = {\n  spinner: {\n    height: '90vh',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n}\nconst Spinner: React.FC = () => (\n  <div className=\"vh-100 vw-100\">\n    <div style={style.spinner}>\n      <Loader type=\"Audio\" color=\"#202020\" height={80} width={80} />\n    </div>\n  </div>\n)\n\nexport default Spinner\n","import React, { Suspense } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Spinner from 'components/layouts/Spinner'\n\nconst BlogsPage = React.lazy(() => import('pages/blogs'))\nconst AccountsPage = React.lazy(() => import('pages/accounts'))\n\nconst Routes: React.FC = () => (\n  <Suspense fallback={<Spinner />}>\n    <Switch>\n      <Route path=\"/blogs\" component={BlogsPage} />\n      <Route path=\"/accounts\" component={AccountsPage} />\n      <Route path=\"/\" component={BlogsPage} />\n    </Switch>\n  </Suspense>\n)\n\nexport default Routes\n","import React from 'react'\nimport { History } from 'history'\nimport { Link } from 'react-router-dom'\nimport clsx from 'clsx'\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles'\nimport smoothscroll from 'smoothscroll-polyfill'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport Drawer from '@material-ui/core/Drawer'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport IconButton from '@material-ui/core/IconButton'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Slide from '@material-ui/core/Slide'\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\nimport Fab from '@material-ui/core/Fab'\nimport Zoom from '@material-ui/core/Zoom'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp'\nimport LinkIcon from '@material-ui/icons/Link'\nimport HomeIcon from '@material-ui/icons/Home'\nimport PersonIcon from '@material-ui/icons/Person'\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn'\nimport ContactMailIcon from '@material-ui/icons/ContactMail'\nimport PolicyIcon from '@material-ui/icons/Policy'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex'\n    },\n    appBar: {\n      backgroundColor: '#fff',\n      color: '#202020',\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    logo: {\n      flexGrow: 1\n    },\n    logoImg: {\n      maxHeight: '48px',\n      cursor: 'pointer'\n    },\n    hide: {\n      display: 'none'\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0\n    },\n    drawerPaper: {\n      width: drawerWidth\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end'\n    },\n    drawerLink: {\n      color: '#202020'\n    },\n    content: {\n      flexGrow: 1,\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      marginLeft: -drawerWidth\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen\n      }),\n      marginLeft: 0\n    },\n    scrollTop: {\n      position: 'fixed',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n      zIndex: 10\n    }\n  })\n)\n\ninterface Props {\n  window?: () => Window\n  children?: React.ReactElement\n}\nfunction HideOnScroll(props: Props) {\n  const { children, window } = props\n  const trigger = useScrollTrigger({ target: window ? window() : undefined })\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  )\n}\nfunction ScrollTop(props: Props) {\n  const { children, window } = props\n  const classes = useStyles()\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100\n  })\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    const anchor = ((event.target as HTMLDivElement).ownerDocument || document).querySelector('#back-to-top-anchor')\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: 'smooth', block: 'center' })\n    }\n    event.preventDefault()\n  }\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.scrollTop}>\n        {children}\n      </div>\n    </Zoom>\n  )\n}\n\ninterface NavBarProps {\n  history: History\n}\nexport const NavBar: React.FC<NavBarProps> = props => {\n  const { history } = props\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false)\n  const [copy, setCopy] = React.useState(false)\n  const handleDrawerOpen = () => setOpen(true)\n  const handleDrawerClose = () => setOpen(false)\n  const handleClipboardCopy = () => setCopy(true)\n  const handleClipboardReset = () => setCopy(false)\n\n  const shareUrl = window.location.origin + props.history.location.pathname\n  const logo = `${process.env.REACT_APP_S3_ENDPOINT}/logo/andrew-tech.png`\n  smoothscroll.polyfill()\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <HideOnScroll {...props}>\n        <AppBar\n          position=\"fixed\"\n          color=\"transparent\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <div className={classes.logo}>\n              <img alt=\"logo\" src={logo} className={classes.logoImg} onClick={() => history.push('/blogs')} />\n            </div>\n            <CopyToClipboard text={shareUrl} onCopy={handleClipboardCopy}>\n              <Tooltip title={copy ? 'コピーしました' : 'URLをコピー'} placement=\"bottom\">\n                <IconButton edge=\"end\" color=\"default\" className=\"ml-2\">\n                  {copy ? <AssignmentTurnedInIcon /> : <LinkIcon />}\n                </IconButton>\n              </Tooltip>\n            </CopyToClipboard>\n          </Toolbar>\n        </AppBar>\n      </HideOnScroll>\n      <Toolbar id=\"back-to-top-anchor\" />\n      <Drawer\n        className={classes.drawer}\n        variant=\"temporary\"\n        anchor=\"left\"\n        open={open}\n        onClose={handleDrawerClose}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>{theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}</IconButton>\n        </div>\n        <Divider />\n        <Link to={'/'}>\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                handleDrawerClose()\n                handleClipboardReset()\n              }}\n            >\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText className={classes.drawerLink}>Home</ListItemText>\n            </ListItem>\n          </List>\n        </Link>\n        <Link to={'/accounts/profile'}>\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                handleDrawerClose()\n                handleClipboardReset()\n              }}\n            >\n              <ListItemIcon>\n                <PersonIcon />\n              </ListItemIcon>\n              <ListItemText className={classes.drawerLink}>Profile</ListItemText>\n            </ListItem>\n          </List>\n        </Link>\n        <Link to={'/accounts/contact'}>\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                handleDrawerClose()\n                handleClipboardReset()\n              }}\n            >\n              <ListItemIcon>\n                <ContactMailIcon />\n              </ListItemIcon>\n              <ListItemText className={classes.drawerLink}>Contact</ListItemText>\n            </ListItem>\n          </List>\n        </Link>\n        <Link to={'/accounts/privacy'}>\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                handleDrawerClose()\n                handleClipboardReset()\n              }}\n            >\n              <ListItemIcon>\n                <PolicyIcon />\n              </ListItemIcon>\n              <ListItemText className={classes.drawerLink}>Privacy</ListItemText>\n            </ListItem>\n          </List>\n        </Link>\n        <Divider />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n      </main>\n      <ScrollTop {...props}>\n        <Fab color=\"default\" aria-label=\"scroll back to top\" className=\"fab\">\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Footer = () => {\n  return (\n    <footer className=\"page-footer font-small black\">\n      <div className=\"footer-copyright text-center py-3\">© 2020 Copyright: Andrew-tech</div>\n    </footer>\n  )\n}\n","import * as React from 'react'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { Store } from 'redux'\nimport { History } from 'history'\nimport Routes from 'routes'\nimport { AppState } from 'store'\nimport { NavBar } from 'components/layouts/NavBar'\nimport { Footer } from 'components/layouts/Footer'\nimport 'App.scss'\n\ninterface AppProps {\n  store: Store<AppState>\n  history: History\n}\n\nconst App: React.FC<AppProps> = props => {\n  const { store, history } = props\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <NavBar {...props} />\n        <Routes />\n      </ConnectedRouter>\n      <Footer />\n    </Provider>\n  )\n}\n\nexport default App\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nfunction registerValidSW(swUrl: string, config: any): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = (): void => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                console.log('New content is available; please refresh.')\n                if (config.onUpdate) {\n                  config.onUpdate(registration)\n                }\n              } else {\n                console.log('Content is cached for offline use.')\n                if (config.onSuccess) {\n                  config.onSuccess(registration)\n                }\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any): void {\n  fetch(swUrl)\n    .then(response => {\n      if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function register(config: any): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator && process.env.PUBLIC_URL !== undefined) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.toString())\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config)\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ')\n        })\n      } else {\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import axios from 'axios'\nimport { BlogsState } from 'store/blogs/types'\nimport { convertToRaw } from 'draft-js'\n\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || ''\n\nexport const saveRequest = async (blogs: BlogsState) => {\n  try {\n    const content = convertToRaw(blogs.editorState.getCurrentContent())\n    const res = await axios.post(`${API_ENDPOINT}/blogs`, {\n      id: blogs.id || '',\n      title: blogs.title,\n      og_image: blogs.ogImage,\n      description: blogs.description,\n      content: JSON.stringify(content),\n      status: blogs.status\n    })\n    return { data: res.data, isSuccess: true }\n  } catch (error) {\n    return { data: null, isSuccess: false }\n  }\n}\n\nexport const fetchRequest = async (blogs: BlogsState) => {\n  try {\n    const res = await axios.get(`${API_ENDPOINT}/blogs/${blogs.id}`)\n    return { data: res.data, isSuccess: true }\n  } catch (error) {\n    return { data: null, isSuccess: false }\n  }\n}\n\nexport const fetchAllRequest = async (blogs: BlogsState) => {\n  try {\n    const res = await axios.get(`${API_ENDPOINT}/blogs`, {\n      params: {\n        status: blogs.status || null\n      }\n    })\n    return { data: res.data, isSuccess: true }\n  } catch (error) {\n    return { data: null, isSuccess: false }\n  }\n}\n","import { all, select, put, takeLatest, takeEvery } from 'redux-saga/effects'\nimport { EditorState, convertFromRaw } from 'draft-js'\nimport { BlogsActionTypes } from 'store/blogs/types'\nimport * as blogsActions from 'store/blogs/actions'\nimport { saveRequest, fetchRequest, fetchAllRequest } from 'store/blogs/api'\n\nfunction* handleSave() {\n  try {\n    const state = yield select()\n    const blogs = state.blogs\n    if (blogs.title !== '' && blogs.description !== '' && blogs.status !== 0) {\n      yield saveRequest(blogs)\n      yield put(blogsActions.setToast({ message: 'ブログが作成されました！', severity: 'success', isOpen: true }))\n    } else {\n      yield put(blogsActions.setToast({ message: '入力されていない値があります', severity: 'error', isOpen: true }))\n    }\n  } catch (err) {\n    yield put(blogsActions.setToast({ message: 'ブログの保存に失敗しました', severity: 'error', isOpen: true }))\n  }\n}\nfunction* handleFetch() {\n  try {\n    const state = yield select()\n    const res = yield fetchRequest(state.blogs)\n    if (res.isSuccess) {\n      const content = convertFromRaw(JSON.parse(res.data.blog.content))\n      res.data.blog.content = EditorState.createWithContent(content)\n      yield put(blogsActions.fetchSuccess(res.data.blog))\n    } else {\n      yield put(blogsActions.setToast({ message: 'ブログの取得に失敗しました。', severity: 'error', isOpen: true }))\n    }\n  } catch (err) {\n    yield put(blogsActions.setToast({ message: 'ブログの取得に失敗しました。', severity: 'error', isOpen: true }))\n  }\n}\nfunction* handleFetchAll() {\n  try {\n    const state = yield select()\n    const res = yield fetchAllRequest(state.blogs)\n    if (res.isSuccess) {\n      yield put(blogsActions.fetchAllSuccess(res.data.blogs))\n    } else {\n      yield put(blogsActions.setToast({ message: 'ブログの取得に失敗しました。', severity: 'error', isOpen: true }))\n    }\n  } catch (err) {\n    yield put(blogsActions.setToast({ message: 'ブログの取得に失敗しました。', severity: 'error', isOpen: true }))\n  }\n}\n\nfunction* blogsSaga() {\n  yield all([\n    takeLatest(BlogsActionTypes.SAVE_REQUEST, handleSave),\n    takeEvery(BlogsActionTypes.FETCH_REQUEST, handleFetch),\n    takeEvery(BlogsActionTypes.FETCH_ALL_REQUEST, handleFetchAll)\n  ])\n}\n\nexport default blogsSaga\n","import { Reducer } from 'redux'\nimport { BlogsState, BlogsActionTypes } from 'store/blogs/types'\nimport { EditorState } from 'draft-js'\n\nexport const initialState: BlogsState = {\n  id: 0,\n  title: '',\n  ogImage: '',\n  description: '',\n  editorState: EditorState.createEmpty(),\n  createdAt: '',\n  updatedAt: '',\n  style: '',\n  status: '',\n  data: [],\n  toast: { message: '', severity: 'info', isOpen: false },\n  loading: false\n}\n\nconst reducer: Reducer<BlogsState> = (state = initialState, action) => {\n  switch (action.type) {\n    case BlogsActionTypes.FETCH_REQUEST:\n    case BlogsActionTypes.FETCH_ALL_REQUEST:\n    case BlogsActionTypes.SAVE_REQUEST: {\n      return { ...state, loading: true }\n    }\n    case BlogsActionTypes.FETCH_SUCCESS: {\n      return {\n        ...state,\n        id: action.payload.id,\n        editorState: action.payload.content,\n        title: action.payload.title,\n        description: action.payload.description,\n        ogImage: action.payload.og_image,\n        status: action.payload.status,\n        createdAt: action.payload.created_at,\n        updatedAt: action.payload.updated_at,\n        loading: false\n      }\n    }\n    case BlogsActionTypes.FETCH_ALL_SUCCESS: {\n      return { ...state, data: action.payload, loading: false }\n    }\n    case BlogsActionTypes.SET_EDITOR_STATE: {\n      return { ...state, editorState: action.payload }\n    }\n    case BlogsActionTypes.SET_TITLE: {\n      return { ...state, title: action.payload }\n    }\n    case BlogsActionTypes.SET_DESCRIPTION: {\n      return { ...state, description: action.payload }\n    }\n    case BlogsActionTypes.SET_OG_IMAGE: {\n      return { ...state, ogImage: action.payload }\n    }\n    case BlogsActionTypes.SET_STATUS: {\n      return { ...state, status: action.payload }\n    }\n    case BlogsActionTypes.SET_ID: {\n      return { ...state, id: action.payload }\n    }\n    case BlogsActionTypes.SET_TOAST: {\n      return { ...state, toast: action.payload }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport { reducer as blogsReducer }\n","import { combineReducers } from 'redux'\nimport { all, fork } from 'redux-saga/effects'\nimport { connectRouter, RouterState } from 'connected-react-router'\nimport { History } from 'history'\n\nimport blogsSaga from 'store/blogs/sagas'\nimport { blogsReducer } from 'store/blogs/reducer'\nimport { BlogsState } from 'store/blogs/types'\n\nexport interface AppState {\n  blogs: BlogsState\n  router: RouterState\n}\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    blogs: blogsReducer,\n    router: connectRouter(history)\n  })\n\nexport function* rootSaga() {\n  yield all([fork(blogsSaga)])\n}\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createBrowserHistory } from 'history'\nimport App from 'App'\nimport * as serviceWorker from 'serviceWorker'\nimport configureStore from 'configureStore'\nimport 'react-app-polyfill/ie11'\n\nconst history = createBrowserHistory()\nconst initialState = window.INITIAL_REDUX_STATE\nconst store = configureStore(history, initialState)\n\nReactDOM.render(<App store={store} history={history} />, document.getElementById('root'))\n\nserviceWorker.unregister()\n","import { Store, createStore, applyMiddleware } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport logger from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga'\nimport { History } from 'history'\nimport { AppState, createRootReducer, rootSaga } from 'store'\n\nexport default function configureStore(history: History, initialState: AppState): Store<AppState> {\n  const composeEnhancers = composeWithDevTools({})\n  const sagaMiddleware = createSagaMiddleware()\n  const preloadedState = window.__PRELOADED_STATE__\n  delete window.__PRELOADED_STATE__\n  if (process.env.NODE_ENV === 'development') {\n    const store = createStore(\n      createRootReducer(history),\n      preloadedState || initialState,\n      composeEnhancers(applyMiddleware(routerMiddleware(history), logger, sagaMiddleware))\n    )\n    window.snapSaveState = () => ({\n      __PRELOADED_STATE__: store.getState()\n    })\n    sagaMiddleware.run(rootSaga)\n    return store\n  } else {\n    const store = createStore(\n      createRootReducer(history),\n      preloadedState || initialState,\n      composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n    )\n    window.snapSaveState = () => ({\n      __PRELOADED_STATE__: store.getState()\n    })\n    sagaMiddleware.run(rootSaga)\n    return store\n  }\n}\n","import { action } from 'typesafe-actions'\nimport { EditorState } from 'draft-js'\nimport { BlogsActionTypes, BlogsState, Blog } from 'store/blogs/types'\n\nexport const setId = (id: number | unknown) => action(BlogsActionTypes.SET_ID, id)\nexport const setStatus = (status: number | unknown) => action(BlogsActionTypes.SET_STATUS, status)\nexport const setEditorState = (editorState: EditorState) => action(BlogsActionTypes.SET_EDITOR_STATE, editorState)\nexport const setTitle = (title: string) => action(BlogsActionTypes.SET_TITLE, title)\nexport const setDescription = (description: string) => action(BlogsActionTypes.SET_DESCRIPTION, description)\nexport const setOgImage = (ogImage: string) => action(BlogsActionTypes.SET_OG_IMAGE, ogImage)\nexport const setToast = (toast: { message?: string; severity?: 'success' | 'info' | 'warning' | 'error' | undefined; isOpen?: boolean }) =>\n  action(BlogsActionTypes.SET_TOAST, toast)\n\nexport const fetchSuccess = (data: BlogsState) => action(BlogsActionTypes.FETCH_SUCCESS, data)\nexport const fetchAllSuccess = (data: Blog[]) => action(BlogsActionTypes.FETCH_ALL_SUCCESS, data)\nexport const fetchRequest = () => action(BlogsActionTypes.FETCH_REQUEST)\nexport const fetchAllRequest = () => action(BlogsActionTypes.FETCH_ALL_REQUEST)\nexport const saveRequest = () => action(BlogsActionTypes.SAVE_REQUEST)\n"],"sourceRoot":""}