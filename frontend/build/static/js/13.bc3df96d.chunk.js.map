{"version":3,"sources":["components/blogs/Card.tsx","pages/blogs/show.tsx"],"names":["style","media","height","width","backgroundSize","deck","image","objectFit","ImageCard","ogImage","title","TrendDecksCard","data","history","gutterBottom","variant","component","slice","map","blog","key","id","src","og_image","alt","top","hover","waves","overlay","tag","small","muted","created_at","description","transparent","color","size","onClick","push","RecentDecksCard","latestOrderBlogs","sort","a","b","Date","getTime","RelatedDecksCard","nextBlog","filter","prevBlog","mapDispatchToProps","setEditorState","blogsActions","setId","fetchRequest","setStatus","fetchAllRequest","BlogsShowPage","React","componentDidMount","window","scrollTo","this","props","location","pathname","split","pop","componentDidUpdate","Number","href","render","shareUrl","origin","editorState","createdAt","maxWidth","className","url","round","onEditorStateChange","readOnly","toolbarHidden","connect","blogs"],"mappings":"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","file":"static/js/13.bc3df96d.chunk.js","sourcesContent":["import React from 'react'\nimport { Blog } from 'store/blogs/types'\nimport { History } from 'history'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport { MDBCard, MDBCardTitle, MDBBtn, MDBCardGroup, MDBCardImage, MDBCardText, MDBCardBody, MDBCardFooter } from \"mdbreact\";\nimport Typography from '@material-ui/core/Typography'\n\ninterface DeckCardProps {\n  id: number\n  data: Blog[]\n  history: History\n}\ninterface ImageCardProps {\n  ogImage: string\n}\nconst style = {\n  media: {\n    height: '40vh',\n    width: 'auto',\n    backgroundSize: 'contain'\n  },\n  deck: {\n    image: {\n      height: '20vh',\n      objectFit: 'cover'\n    }\n  }\n}\n\nexport const ImageCard: React.FC<ImageCardProps> = ({ ogImage }) => (\n  <Card>\n    <CardActionArea>\n      <CardMedia image={ogImage || 'image'} title=\"blog image\" style={style.media} />\n    </CardActionArea>\n  </Card>\n)\n\nexport const TrendDecksCard: React.FC<DeckCardProps> = ({ data, history }) => {\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        人気の記事\n      </Typography>\n      <MDBCardGroup deck>\n        {data.slice(0, 3).map(blog => (\n          <MDBCard key={blog.id}>\n            <MDBCardImage src={blog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{blog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {blog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {blog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`blogs/${blog.id}`)}>\n                記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        ))}\n      </MDBCardGroup>\n    </div>\n  )\n}\n\nexport const RecentDecksCard: React.FC<DeckCardProps> = ({ data, history }) => {\n  const latestOrderBlogs = data.sort((a,b) => {\n    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n  });\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        最近の記事\n      </Typography>\n      <MDBCardGroup deck>\n        {latestOrderBlogs.slice(0, 3).map(blog => (\n          <MDBCard key={blog.id}>\n            <MDBCardImage src={blog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{blog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {blog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {blog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`/blogs/${blog.id}`)}>\n                記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        ))}\n      </MDBCardGroup>\n    </div>\n  )\n}\n\nexport const RelatedDecksCard: React.FC<DeckCardProps> = ({ id, data, history }) => {\n  const nextBlog = data.filter(blog => blog.id === id + 1)[0]\n  const prevBlog = data.filter(blog => blog.id === id - 1)[0]\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        関連の記事\n      </Typography>\n      <MDBCardGroup deck>\n        {prevBlog &&\n          <MDBCard>\n            <MDBCardImage src={prevBlog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{prevBlog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {prevBlog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {prevBlog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`/blogs/${prevBlog.id}`)}>\n                前の記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        }\n        {nextBlog &&\n          <MDBCard>\n            <MDBCardImage src={nextBlog.og_image} alt=\"MDBCard image cap\" top hover waves overlay=\"white-slight\" style={style.deck.image} />\n            <MDBCardBody>\n              <MDBCardTitle tag=\"h5\">{nextBlog.title}</MDBCardTitle>\n              <MDBCardText small muted>\n                {nextBlog.created_at}\n              </MDBCardText>\n              <MDBCardText>\n                {nextBlog.description}\n              </MDBCardText>\n            </MDBCardBody>\n            <MDBCardFooter small transparent>\n              <MDBBtn color=\"primary\" size=\"sm\" onClick={() => history.push(`/blogs/${nextBlog.id}`)}>\n                次の記事を読む\n              </MDBBtn>\n            </MDBCardFooter>\n          </MDBCard>\n        }\n      </MDBCardGroup>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { History } from 'history'\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  LineShareButton,\n  TwitterShareButton,\n  EmailIcon,\n  FacebookIcon,\n  LineIcon,\n  TwitterIcon\n} from 'react-share'\nimport { EditorState } from 'draft-js'\nimport { AppState } from 'store'\nimport { connect } from 'react-redux'\nimport * as blogsActions from 'store/blogs/actions'\nimport { Editor } from 'react-draft-wysiwyg'\nimport { Blog } from 'store/blogs/types'\nimport { RelatedDecksCard } from 'components/blogs/Card'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport Avatar from '@material-ui/core/Avatar'\n\ninterface PropsFromState {\n  id: number\n  editorState: EditorState\n  title: string\n  description: string\n  ogImage: string\n  createdAt: string\n  data: Blog[]\n  history: History\n}\ninterface PropsFromDispatch {\n  setEditorState: typeof blogsActions.setEditorState\n  setId: typeof blogsActions.setId\n  fetchRequest: typeof blogsActions.fetchRequest\n  setStatus: typeof blogsActions.setStatus\n  fetchAllRequest: typeof blogsActions.fetchAllRequest\n}\ntype AllProps = PropsFromState & PropsFromDispatch\n\nconst mapStateToProps = ({ blogs }: AppState) => ({\n  id: blogs.id,\n  editorState: blogs.editorState,\n  title: blogs.title,\n  description: blogs.description,\n  ogImage: blogs.ogImage,\n  createdAt: blogs.createdAt,\n  data: blogs.data\n})\nconst mapDispatchToProps = {\n  setEditorState: blogsActions.setEditorState,\n  setId: blogsActions.setId,\n  fetchRequest: blogsActions.fetchRequest,\n  setStatus: blogsActions.setStatus,\n  fetchAllRequest: blogsActions.fetchAllRequest,\n}\n\nclass BlogsShowPage extends React.Component<AllProps> {\n  componentDidMount() {\n    window.scrollTo(0, 0)\n    this.props.setId(this.props.history.location.pathname.split('/').pop())\n    this.props.fetchRequest()\n    this.props.setStatus('publish')\n    this.props.fetchAllRequest()\n  }\n  componentDidUpdate() {\n    if(this.props.id !== Number(window.location.href.split('/').pop())){\n      window.scrollTo(0, 0)\n      this.props.setId(this.props.history.location.pathname.split('/').pop())\n      this.props.fetchRequest()\n      this.props.setStatus('publish')\n      this.props.fetchAllRequest()\n    }\n  }\n  render() {\n    const style = {\n      image: {\n        width: '60px',\n        height: '60px'\n      }\n    }\n    const shareUrl = window.location.origin + this.props.history.location.pathname\n    const { editorState, title, description, ogImage, createdAt, setEditorState } = this.props\n    return (\n      <>\n        <Container maxWidth=\"md\" className=\"my-5 blog min-vh-100\">\n          <div className=\"d-flex align-items-center\">\n            <Avatar alt=\"og image\" src={ogImage} className=\"mr-4\" style={style.image} />\n            <div>\n              <Typography variant=\"h5\" component=\"h1\">\n                {title}\n              </Typography>\n              <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n                {createdAt}\n              </Typography>\n            </div>\n          </div>\n          <Typography variant=\"subtitle1\" gutterBottom className=\"mt-4\">\n            {description}\n          </Typography>\n          <Divider className=\"my-4\" />\n          <div className=\"my-2\">\n            <TwitterShareButton url={shareUrl}>\n              <TwitterIcon round size={32} />\n            </TwitterShareButton>\n            <FacebookShareButton url={shareUrl}>\n              <FacebookIcon round size={32} />\n            </FacebookShareButton>\n            <EmailShareButton url={shareUrl}>\n              <EmailIcon round size={32} />\n            </EmailShareButton>\n            <LineShareButton url={shareUrl}>\n              <LineIcon round size={32} />\n            </LineShareButton>\n          </div>\n          <Editor editorState={editorState} onEditorStateChange={setEditorState} readOnly toolbarHidden />\n          <Divider className=\"my-4\" />\n          <RelatedDecksCard {...this.props} />\n        </Container>\n      </>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlogsShowPage)\n"],"sourceRoot":""}